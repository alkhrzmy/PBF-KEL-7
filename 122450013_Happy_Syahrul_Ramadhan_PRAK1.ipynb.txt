{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Tahap : Beginner"
      ],
      "metadata": {
        "id": "jMEksmOCNswA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#1\n",
        "a = 2\n",
        "b = 3\n",
        "hasil = sum([a,b])\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "81CnlS5-NyiG",
        "outputId": "aad9981e-9300-4b78-e42d-7bf2e9e25fea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2\n",
        "def pengurangan(a, b):\n",
        "  return a - b\n",
        "hasil = pengurangan(5, 4)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xdBuwxj4N71f",
        "outputId": "9b73cb1f-a3ad-4de5-c00d-d1ebc5af251f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3\n",
        "import math\n",
        "def perkalian(a, b):\n",
        "  return math.prod([a, b])\n",
        "hasil = perkalian(3, 5)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_PzbyMV2OLmX",
        "outputId": "3d5577a2-a7d4-4d60-d0b4-41447f808ab9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#4\n",
        "a = 4\n",
        "b = 2\n",
        "hasil = a / b\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "llBQgcC-OVQY",
        "outputId": "2a516c43-a373-44c2-c810-52fe9eb6deae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#5\n",
        "def pemangkatan(a, b):\n",
        "  return a ** b\n",
        "hasil = pemangkatan(2, 3)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ARaNPhIeOajG",
        "outputId": "2ad38a01-b3b8-42ef-c227-d8b87dffe69b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6\n",
        "import math\n",
        "def akar_kuadrat(a):\n",
        "  return math.sqrt(a)\n",
        "hasil = akar_kuadrat(4)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p39534qMOfcH",
        "outputId": "efd63cd6-e1a9-4fcd-a8c1-0db60f8af756"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#7\n",
        "import math\n",
        "a = 10\n",
        "hasil = math.factorial(a)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H3VPrQFcOlse",
        "outputId": "68c0fef5-4049-497d-cadf-8c71ec5216e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3628800\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#8\n",
        "import math\n",
        "def logaritma(a, base):\n",
        "  return math.log(a, base)\n",
        "hasil = logaritma(5, 3)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sJPeYCm_Os_4",
        "outputId": "94a7fbc2-853e-40ee-abe6-cc90d7af1359"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.4649735207179269\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9\n",
        "import math\n",
        "def sinus(a):\n",
        "  return math.sin(math.radians(a))\n",
        "hasil = sinus(10)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wl5rCp8WOw8-",
        "outputId": "f301c413-e276-4633-fbc9-54e6058b4ee8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.17364817766693033\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#10\n",
        "import math\n",
        "a = 10\n",
        "hasil = math.cos(math.radians(a))\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u8jRI1wlO2tq",
        "outputId": "45c7617b-7f2d-464a-9bb9-b0ee7c6aeb51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.984807753012208\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#11\n",
        "import math\n",
        "def tangen(a):\n",
        "  return math.tan(math.radians(a))\n",
        "hasil = tangen(15)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sUIED1ozO6QK",
        "outputId": "3424b17c-df7b-4b47-adbb-45c5d22b4b5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.2679491924311227\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#12\n",
        "import math\n",
        "def eksponensial(a):\n",
        "  return math.exp(a)\n",
        "hasil = eksponensial(20)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EdkU0LFCPA4J",
        "outputId": "ef0a5f1a-beec-4dca-a05b-16f0982b96f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "485165195.4097903\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#13\n",
        "a = 20\n",
        "b = 2\n",
        "hasil = a % b\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UJrMxgUtPHjq",
        "outputId": "5924dd9b-e566-4ba2-bba9-0244ef774fb3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#14\n",
        "import math\n",
        "def permutasi(n, r):\n",
        "  return math.factorial(n) / math.factorial(n - r)\n",
        "hasil = permutasi(4, 2)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bX2Bl0nlPT0K",
        "outputId": "897576a7-1b63-4348-fabb-07b13bbb2626"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#15\n",
        "import math\n",
        "def kombinasi(n, r):\n",
        "  return math.factorial(n) / (math.factorial(r) * math.factorial(n - r))\n",
        "hasil = kombinasi(4, 2)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aHLoRM__PYp7",
        "outputId": "b4f08f68-5efa-4f52-ff03-7533b45f6431"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#16\n",
        "import math\n",
        "a = 20\n",
        "hasil = math.radians(a)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hWwKPjBAPfRP",
        "outputId": "9380e2c5-bdde-4c8c-996a-f767bc798abe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.3490658503988659\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#17\n",
        "import math\n",
        "def radian_ke_derajat(a):\n",
        "  return math.degrees(a)\n",
        "hasil = radian_ke_derajat(math.pi)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BW_6wktfPiML",
        "outputId": "51bb71e5-50ba-4f88-d8e5-1af1b6564fae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "180.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#18\n",
        "def minimum(a, b):\n",
        "  return min(a, b)\n",
        "hasil = minimum(10, 20)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6QP4OuoxPlpz",
        "outputId": "02941870-4b80-46b0-8cb5-81bc62b9943a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#19\n",
        "a = 5\n",
        "b = 10\n",
        "hasil = max(a, b)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p2NKKyw7Pq5-",
        "outputId": "a017358f-2f06-423d-d5ca-52c1c91ec92e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#20\n",
        "import math\n",
        "def pembulatan_ke_atas(a):\n",
        "  return math.ceil(a)\n",
        "hasil = pembulatan_ke_atas(2.5)\n",
        "print(hasil)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AaUP7AR0Puum",
        "outputId": "0d86167e-5ad7-4a2f-a63e-391dc64af282"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tahap : Intermediate"
      ],
      "metadata": {
        "id": "zni9m1RQP0L7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#1\n",
        "a, b, c = 3, 5, 1\n",
        "median = sorted([a, b, c])[1]\n",
        "print(median)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xRkY4tNlP3rk",
        "outputId": "0206aca3-2671-41dd-a6ff-9a29232e10a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2\n",
        "def luas_lingkaran(r):\n",
        "  return 3.14 * r ** 2\n",
        "r = 5\n",
        "print(luas_lingkaran(r))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GegwFapyQBrU",
        "outputId": "2c09ffae-75cc-4f11-de58-5ae233cc32d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "78.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3\n",
        "def luas_segitiga(alas, tinggi):\n",
        "  return 0.5 * alas * tinggi\n",
        "alas = 10\n",
        "tinggi = 3\n",
        "print(luas_segitiga(alas, tinggi))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B2KfMx61QFxb",
        "outputId": "392b3b5f-1da0-4295-b5dc-5b2045958447"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#4\n",
        "celcius = 20\n",
        "fahrenheit = (celcius * 9/5) + 32\n",
        "print(fahrenheit)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8SzbxB26QJgO",
        "outputId": "e3a3d519-bfbd-4d85-c3fa-c39feb8747cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "68.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#5\n",
        "def fahrenheit_ke_celcius(fahrenheit):\n",
        "  return (fahrenheit - 32) * 5/9\n",
        "fahrenheit = 1\n",
        "print(fahrenheit_ke_celcius(fahrenheit))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mr9fX88YQNH-",
        "outputId": "652754e3-2b0b-4bd2-ba59-0ec479993dd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-17.22222222222222\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6\n",
        "def luas_permukaan_kubus(sisi):\n",
        "  return 6 * sisi ** 2\n",
        "sisi = 5\n",
        "print(luas_permukaan_kubus(sisi))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N753bPq0QZ5I",
        "outputId": "bec3ef7d-614a-45c0-dc74-c8a45dd7b262"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "150\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#7\n",
        "sisi = 20\n",
        "volume = sisi ** 3\n",
        "print(volume)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jDep1F1BQc7l",
        "outputId": "bb0cf892-9de7-49bf-f514-5c3a27f4dbcc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#8\n",
        "def keliling_lingkaran(r):\n",
        "  return 2 * 3.14 * r\n",
        "r = 10\n",
        "print(keliling_lingkaran(r))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mJD9g5iyQeVW",
        "outputId": "a85b553f-7f68-401d-d210-9c857e02c6b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "62.800000000000004\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9\n",
        "def luas_trapesium(a, b, tinggi):\n",
        "  return 0.5 * (a + b) * tinggi\n",
        "a = 10\n",
        "b = 5\n",
        "tinggi = 7\n",
        "print(luas_trapesium(a, b, tinggi))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MSUCHO0eQhb9",
        "outputId": "17bbb387-ca4c-4562-ae5e-59af39f2e97d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "52.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#10\n",
        "alas = 10\n",
        "tinggi = 5\n",
        "luas = alas * tinggi\n",
        "print(luas)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w2lwgoyLQnkd",
        "outputId": "4869b1cb-4482-4c86-a815-eff77eda3aac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#11\n",
        "def volume_kerucut(r, tinggi):\n",
        "  return (1/3) * 3.14 * r ** 2 * tinggi\n",
        "r = 20\n",
        "tinggi = 10\n",
        "print(volume_kerucut(r, tinggi))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CAZgkNSuQscF",
        "outputId": "8f063939-f5a4-425d-e6a8-92cf161e2282"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4186.666666666666\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#12\n",
        "def volume_tabung(r, tinggi):\n",
        "  return 3.14 * r ** 2 * tinggi\n",
        "r = 20\n",
        "tinggi = 10\n",
        "print(volume_tabung(r, tinggi))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sv32UT18Qwcu",
        "outputId": "8bd44791-52e1-4d66-c396-fe3843ecda4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12560.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#13\n",
        "r = 5\n",
        "tinggi = 15\n",
        "luas_permukaan = 2 * 3.14 * r * (r + tinggi)\n",
        "print(luas_permukaan)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FLEEVYs1Q2Lg",
        "outputId": "1c91d283-f1df-46a0-c243-f5123e4081b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "628.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#14\n",
        "def luas_permukaan_kerucut(r, s):\n",
        "  return 3.14 * r * (r + s)\n",
        "r = 20\n",
        "s = 10 # Panjang garis pelukis\n",
        "print(luas_permukaan_kerucut(r, s))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qY5THcQlQ5De",
        "outputId": "95423f1d-2d3c-4765-d542-249953dfe163"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1884.0000000000002\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#15\n",
        "def luas_permukaan_bola(r):\n",
        "  return 4 * 3.14 * r ** 2\n",
        "r = 6\n",
        "print(luas_permukaan_bola(r))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3tmKrSUnQ9ZO",
        "outputId": "6c5af4f3-c303-4f31-af8f-106af2bc0ec4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "452.16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#16\n",
        "r = 5\n",
        "volume = (4/3) * 3.14 * r ** 3\n",
        "print(volume)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IUFJLsjGRBPf",
        "outputId": "bb461c1d-f846-47a5-afec-cfe5a6d031db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "523.3333333333334\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#17\n",
        "def luas_permukaan_prisma(alas, tinggi_alas, tinggi_prisma):\n",
        "  luas_alas = alas * tinggi_alas\n",
        "  keliling_alas = 2 * (alas + tinggi_alas)\n",
        "  luas_sisi_tegak = keliling_alas * tinggi_prisma\n",
        "  return 2 * luas_alas + luas_sisi_tegak\n",
        "alas = 10\n",
        "tinggi_alas = 5\n",
        "tinggi_prisma = 19\n",
        "print(luas_permukaan_prisma(alas, tinggi_alas, tinggi_prisma))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L-D5khPqRE0x",
        "outputId": "10522cc6-68cf-45c1-8f39-6da4c49b3502"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "670\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#18\n",
        "def volume_prisma(alas, tinggi_alas, tinggi_prisma):\n",
        "  return alas * tinggi_alas * tinggi_prisma\n",
        "alas = 10\n",
        "tinggi_alas = 40\n",
        "tinggi_prisma = 5\n",
        "print(volume_prisma(alas, tinggi_alas, tinggi_prisma))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4XcALbKVRf7Q",
        "outputId": "0f84e792-b16f-494b-a41e-4e29a8e8af6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#19\n",
        "alas = 19\n",
        "tinggi_alas = 17\n",
        "tinggi_limas = 21\n",
        "luas_alas = alas * tinggi_alas\n",
        "luas_sisi_tegak = 4 * (1/2) * alas * tinggi_limas\n",
        "luas_permukaan = luas_alas + luas_sisi_tegak\n",
        "print(luas_permukaan)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GWKwb-hYRCyx",
        "outputId": "ee662a51-9ec4-4dc3-f307-10c5bac0901e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1121.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#20\n",
        "def volume_limas(alas, tinggi_alas, tinggi_limas):\n",
        "  return (1/3) * alas * tinggi_alas * tinggi_limas\n",
        "alas = 10\n",
        "tinggi_alas = 5\n",
        "tinggi_limas = 19\n",
        "print(volume_limas(alas, tinggi_alas, tinggi_limas))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MvrUSSYHRqiu",
        "outputId": "48399d77-6ee1-4391-87ff-694b7a5bea05"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "316.66666666666663\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Tugas Kedua** : Buatlah Calculator dengan mengikuti pemrograman berbasis fungsi, pilih beberapa\n",
        "fungsi di atas. Berikut adalah algoritma untuk kalkulator sederhana yang dapat menghitung lima\n",
        "persamaan matematika pada level intermediate:"
      ],
      "metadata": {
        "id": "Y0x1kS2iSCrV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def luas_lingkaran():\n",
        "  r = int(input(\"Masukkan nilai jari-jari : \"))\n",
        "  luas = 3.14 * r ** 2\n",
        "  print(\"Luas Lingkaran\", luas)\n",
        "\n",
        "def luas_segitiga():\n",
        "  alas = int(input(\"Masukkan Alas : \"))\n",
        "  tinggi = int(input(\"Masukkan Tinggi : \"))\n",
        "  luas_segitiga = 0.5 * alas * tinggi\n",
        "  print(\"Luas Segitiga : \", luas_segitiga)\n",
        "\n",
        "def volume_kubus():\n",
        "  s = int(input(\"masukkan Sisi : \"))\n",
        "  vlume = s * s * s\n",
        "  print(\"Volume Kubus : \", volume)\n",
        "\n",
        "def luas_permukaan_kubus():\n",
        "  s = int(input(\"Masukkan nilai sisi : \"))\n",
        "  luas_permukaan_kubus = 6 * s **2\n",
        "  print(\"luas permukaan kubus : \", luas_permukaan_kubus)\n",
        "\n",
        "def Volume_Tabung():\n",
        "  r = int(input(\"Masukkan nilai jari-jari : \"))\n",
        "  t = int(input(\"Masukkan nilai tinggi tabung : \"))\n",
        "  Volume_Tabung = r ** 2 * t\n",
        "  print(\"Volume Tabung : \", Volume_Tabung)\n",
        "\n",
        "def menu():\n",
        "  kondisi = True\n",
        "  while True:\n",
        "    print(\"Pilih Menu\")\n",
        "    print(\"1. Luas Lingkaran\")\n",
        "    print(\"2. Luas Segitiga\")\n",
        "    print(\"3. Volume Kubus\")\n",
        "    print(\"4. Luas Permukaan Kubus\")\n",
        "    print(\"5. Volume Tabung\")\n",
        "    print(\"6. keluar\")\n",
        "    menu = int(input(\"Pilih 1/2/3/4/5/6 : \"))\n",
        "\n",
        "    if menu == 1:\n",
        "      luas_lingkaran()\n",
        "    elif menu == 2:\n",
        "      luas_segitiga()\n",
        "    elif menu == 3:\n",
        "      volume_kubus()\n",
        "    elif menu == 4:\n",
        "      luas_permukaan_kubus()\n",
        "    elif menu == 5:\n",
        "      Volume_Tabung()\n",
        "    else:\n",
        "      break\n",
        "\n",
        "menu()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H4jZDsU2R_t2",
        "outputId": "f25a3101-17de-48a2-9ddc-d377d26d648d"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Pilih Menu\n",
            "1. Luas Lingkaran\n",
            "2. Luas Segitiga\n",
            "3. Volume Kubus\n",
            "4. Luas Permukaan Kubus\n",
            "5. Volume Tabung\n",
            "6. keluar\n",
            "Pilih 1/2/3/4/5/6 : 4\n",
            "Masukkan nilai sisi : 5\n",
            "luas permukaan kubus :  150\n",
            "Program Berhenti\n",
            "Pilih Menu\n",
            "1. Luas Lingkaran\n",
            "2. Luas Segitiga\n",
            "3. Volume Kubus\n",
            "4. Luas Permukaan Kubus\n",
            "5. Volume Tabung\n",
            "6. keluar\n",
            "Pilih 1/2/3/4/5/6 : 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tahapan Advanced"
      ],
      "metadata": {
        "id": "uogt9-gyaxMc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#1. Metode Biseksi\n",
        "\n",
        "def biseksi(f, a, b, tol):\n",
        "  if f(a) * f(b) > 0:\n",
        "    print(\"Tidak ada akar yang berada di antara a dan b\")\n",
        "    return None\n",
        "  while (b - a) / 2 > tol:\n",
        "    midpoint = (a + b) / 2\n",
        "    if f(midpoint) == 0:\n",
        "      return midpoint\n",
        "    elif f(a) * f(midpoint) < 0:\n",
        "      b = midpoint\n",
        "    else:\n",
        "      a = midpoint\n",
        "  return (a + b) / 2\n",
        "# Contoh penggunaan\n",
        "f = lambda x: x**3 - x - 2\n",
        "akar = biseksi(f, 1, 2, 0.01)\n",
        "print(akar)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KKSm4vhSa2FM",
        "outputId": "47c33366-59a8-42dd-90c8-813af8a2cc2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.5234375\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Metode Regula Falsi (User-Defined function)\n",
        "def regula_falsi(f, a, b, tol):\n",
        "  if f(a) * f(b) > 0:\n",
        "    print(\"Tidak ada akar yang berada di antara a dan b\")\n",
        "    return None\n",
        "  while (b - a) > tol:\n",
        "    c = b - (f(b) * (b - a)) / (f(b) - f(a))\n",
        "    if f(c) == 0:\n",
        "      return c\n",
        "    elif f(a) * f(c) < 0:\n",
        "      b = c\n",
        "    else:\n",
        "      a = c\n",
        "  return c\n",
        "# Contoh penggunaan\n",
        "f = lambda x: x**3 - x - 2\n",
        "akar = regula_falsi(f, 1, 2, 0.01)\n",
        "print(akar)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ypEjxrl3bbsH",
        "outputId": "fba89da6-5dd3-4763-fba7-b0091b9c04a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.5213797068045676\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Metode Newton-Raphson (User-Defined function)\n",
        "def newton_raphson(f, df, x0, tol):\n",
        "  while abs(f(x0)) > tol:\n",
        "    x0 = x0 - f(x0) / df(x0)\n",
        "  return x0\n",
        "# Contoh penggunaan\n",
        "f = lambda x: x**3 - x - 2\n",
        "df = lambda x: 3*x**2 - 1\n",
        "akar = newton_raphson(f, df, 1.5, 0.01)\n",
        "print(akar)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "izNo6bIFbpSr",
        "outputId": "7ad4b479-07eb-4522-9877-621f3604f312"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.5217391304347827\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def secant(f, x0, x1, tol):\n",
        "  while abs(f(x1)) > tol:\n",
        "    x_temp = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0))\n",
        "    x0, x1 = x1, x_temp\n",
        "  return x1\n",
        "# Contoh penggunaan\n",
        "f = lambda x: x**3 - x - 2\n",
        "akar = secant(f, 1, 2, 0.01)\n",
        "print(akar)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tPoFkOjIb_Fk",
        "outputId": "57312e0c-a095-4d6f-8f32-33afe5996d6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.5209264205152802\n"
          ]
        }
      ]
    }
  ]
}